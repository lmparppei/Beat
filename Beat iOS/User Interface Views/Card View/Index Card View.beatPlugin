/*

New Outline
© Lauri-Matti Parppei

*/

// Require the Beat template engine + backwards-compatibility polyfills
require("MojaveSupport")
require("Template")

let json
let window 
let timer
let updated = false
let processing = false
let process = "" // Process UUID to avoid race conditions

// Currently selected range, because we can't ask for that in background. Remember to update this when creating HTML.
let selectedRange = { location: 0, length: 0 }

let modes = { ios: 1, window: 2, container: 3 }

if (Beat.container != undefined) mode = modes.container;
else if (Beat.iOS()) mode = modes.ios;
else mode = modes.window;

if (Beat.container != undefined) {
	Beat.container.onViewWillDraw = () => {
		// When opening contained view, refresh the HTML if needed
		if (!updated) refreshHTML();
	}
}

// Templates for cards and elements
let templates = {
	scene: new Template("<div class='item card {{color}} {{selected}} {{isOmitted}}' color='{{color}}' uuid='{{uuid}}' position='{{range.location}}' length='{{range.length}}'><div class='card-content'>\
			<div class='heading'><div class='sceneNumber'>{{ sceneNumber }}</div><div class='title'>{{ stringForDisplay }}</div></div>\
				<div class='card-container'>\
					{{ synopsisList }}\
					{{ noteList }}\
					<div class='content'>{{ text }}</div>\
				</div>\
				<div class='editButton'>✎</div>\
				<div class='footer'>{{storylineList}} &nbsp;<div class='pages'>{{ pages }} {{ eights }}&nbsp;</div></div>\
			</div></div>"),

	synopsisList: new Template("<div class='synopsis'><ul>{{ synopsisList }}</ul></div>"),
	synopsisItem: new Template("<li class='synopsis-item {{ color }}' uuid='{{uuid}}' sceneUuid='{{sceneUuid}}'>{{ stringForDisplay }}</li>"),

	section: new Template("<div class='item section' depth='{{sectionDepth}}' uuid='{{uuid}}'><h2>{{ stringForDisplay }}</h2>{{ synopsisList }}</div>"),

	storyline: new Template("<span class='storyline'>{{ storyline }}</span>"),
	storylineList: new Template("<div class='storylineList'>{{ storylines }}</div>"),

	note: new Template("<li class='note {{ color }}'>✎ {{ content }}</li>"),
	noteList: new Template("<div class='noteList'><ul>{{ notes }}</ul></div>"),
	printedCard: new Template("<div class='cardContainer'><div class='card'>\
									<div class='header'>\
										<div class='sceneNumber'>{{sceneNumber}}</div> <h3>{{stringForDisplay}}</h3>\
									</div>\
									{{synopsisList}}\
									<p>{{text}}</p>\
								</div></div>")
}


// When running the plugin for the first time, create the outline immediately
let html = (Beat.outline()?.length > 0) ? createOutline(...Beat.outline()) : ""

// Get files from inside the app bundle
let css = Beat.appAssetAsString("BeatCardsUI.css")
let ui = Beat.appAssetAsString("BeatCardsUI.html")
let js = Beat.appAssetAsString("dragula.js")

let additionalCSS = ""

if (Beat.iOS()) {
	additionalCSS = "#print, #zoom { display: none; }"
}

let current = ""
if (Beat.currentScene != null) current = Beat.currentScene.line.uuidString()

// Create UI
ui = Beat.localize(ui).replaceAll("{{html}}", html).replaceAll("{{css}}", css).replaceAll("{{dragula}}", js).replaceAll("{{mode}}", mode).replaceAll("{{iOS}}", (Beat.iOS() ? 'true' : 'false')).replaceAll("{{iOS-css}}", additionalCSS,).replaceAll("{{current}}", current)

// Create window.
// We'll choose the appropriate view to use as the HTML view.
// On iOS, it'll be a HTML panel, on macOS it's either a window (for the detached view) or the container (for the static view)
if (mode == modes.ios) {
	window = Beat.htmlPanel(ui, 900, 600, function () { Beat.end(); })
}
else if (mode == modes.window) {
	window = Beat.htmlWindow(ui, 900, 600, function () { Beat.end(); })
}
else if (mode == modes.container) {
	// This plugin is running *inside a plugin container*, so we'll get the HTML view from the container
	window = Beat.container

	window.setHTML(ui)
}


// ###################################
// Listeners
// ###################################

// Register the listener
Beat.onTextChange(function (outlineChanges) {
	updated = false

	if (timer != undefined && timer != null) timer.invalidate();

	// If the container is currently in view, let's update it in sync.
	// Otherwise we'll send set the timer.
	let time = 1.5
	if (Beat.container != undefined && Beat.container.displayed) time = 0.0;
	
	timer = Beat.timer(time, () => {
		refreshHTML()
	})
})

Beat.onSelectionChange((selection) => {
	let outline = Beat.outline()
	let currentScene = Beat.currentScene
	
	if (currentScene == null) return;

	let scroll = true
	if (Beat.container != undefined && Beat.container.displayed) {
		// Do nothing if the container is in view.
		scroll = false
	}

	let uuid = currentScene.line?.uuidString()

	window.runJS('updateSelection("' + uuid + '", ' + scroll + ')')
})


// ###################################
// HTML
// ###################################

function refreshHTML() {
	if (processing) return;
	
	const outline = [...Beat.outline()]

	// Store selected range
	selectedRange = Beat.selectedRange()
	
	Beat.async(() => {
		// Avoid race conditions
		if (processing) return
		processing = true
			
		let html = createOutline(...outline).replaceAll("\"", "\\\"")
			
		// Escape the string
		let htmlString = JSON.stringify(html)
		
		Beat.sync(() => {
			window.runJS('load(' + htmlString + ')')
			updated = true
		})
		processing = false
	})
}

// This method returns the HTML for index cards
function createOutline(...outline) {
	json = []

	let pagination = Beat.currentPagination()
	let previousScene

	for (let i=0; i < outline.length; i++) {
		let scene = updateScene(outline[i], pagination)
		json.push(scene)
    }

    // Create HTML based on the JSON data
    let html = "<div class='dragContainer'>"

    for (const scene of json) {
    	let card = updateCard(scene)
    	html += card.html

    	if (scene.type == Beat.type.section && scene.sectionDepth < 3) {
    		html += "</div><div class='dragContainer'>"
    	}

    	previousScene = scene
    }

    html += "</div>"
	
    return html
}


// Get JSON for the scene and update it with some custom data
function updateScene(scene, pagination = Beat.currentPagination()) {
	let sceneJSON = scene.json()

	// Get the snippet (if needed)
	sceneJSON.text = ""
	
	// Get lines for this scene
	let sceneLines = Beat.linesForScene(scene)
	
	if (sceneLines != null) {
		for (let i=1; i<sceneLines.length; i++) {
			let line = sceneLines[i]
			if (line.type != Beat.type.empty && line.length > 0) {
				if (!scene.omitted) sceneJSON.text = line.stripFormatting();
				else sceneJSON.text = line.string;
				
				break
			}
		}
	}
	
	sceneJSON.text = sceneJSON.text.replaceAll("<", "&lt;")

	// Convert some values to lowercase for consistency
	sceneJSON.color = sceneJSON.color?.toLowerCase()
	sceneJSON.typeAsString = sceneJSON.typeAsString?.toLowerCase()

	// Get scene height
	const lengthStart = Date.now();
	let pages = pagination.sceneLengthInEights(scene)
	const lengthEnd = Date.now();
	
	// (Oh my fucking god JavaScript is silly with its non-typed variables
	// but I don't care.)
	if (pages[0] > 0) sceneJSON.pages = pages[0];
	else sceneJSON.pages = "";
	if (pages[1] > 0) sceneJSON.eights = pages[1] + "/8";
	else sceneJSON.eights = ""
		
	// Add the JSON data to array
	return sceneJSON
}

// Create the actual HTML card
function updateCard(scene) {
	let card = {
		html: "",
		uuid: ""
	}

	scene.synopsisList = ""
	let synopsisList = []
	if (scene.synopsis.length) {
		for (const synopsis of scene.synopsis) {
			synopsisList += templates.synopsisItem.withData(synopsis)
		}
		scene.text = ""
	}
	scene.synopsisList = templates.synopsisList.withData({ synopsisList: synopsisList });

	scene.storylineList = ""
	if (scene.storylines.length) {
		let storylines = ""
		for (const storyline of scene.storylines) {
			storylines += templates.storyline.withData({ storyline: storyline })
		}
		scene.storylineList = templates.storylineList.withData({ storylines: storylines })
	}

	scene.noteList = ""
	if (scene.notes.length) {
		let notes = ""
		for (const note of scene.notes) {
			if (note.type == "note" && note.content.indexOf("COLOR") != 0 && note.content.length > 0) notes += templates.note.withData({ color: note.color, content: note.content })
		}
		if (notes.length > 0) scene.noteList = templates.noteList.withData({ notes: notes })
	}

	// Don't display the snippet if not needed
	if (scene.noteList.length > 0 || synopsisList.length > 0) scene.text = ""

	scene.isOmitted = (scene.omitted) ? "omitted" : ""
	
	if (selectedRange.location >= scene.range.location && selectedRange.location < scene.range.location + scene.range.length) {
		scene.selected = "selected"
	} else {
		scene.selected = ""
	}

	// Load template
	let cardHTML
	if (scene.typeAsString == "heading") cardHTML = templates.scene.withData(scene)
	else cardHTML = templates.section.withData(scene)

	card.html = cardHTML
	card.uuid = scene.line.uuid
	
	return card
}


// ###################################
// Calls from window
// ###################################

// Custom methods to be called from the plugin window
Beat.custom = {
	restart: () => {
		Beat.restart()
	},
	scrollToLine: (uuid) => {
		let line = Beat.currentParser.lineWithUUID(uuid)
		Beat.scrollToLine(line)
		Beat.focusEditor()
	},
	getSceneForUUID: (uuid) => {
		for (let i=0; i<Beat.outline().length; i++) {
			let s = outline[i]
			let sceneUUID = s.line.uuidString()
			
			if (uuid == sceneUUID) return s;
		}

		return null
	},
	setColor: (uuid, color) => {
		let line = Beat.currentParser.lineWithUUID(uuid)
		Beat.setColorForScene(color, line)
	},
	moveScene: (sceneUUID, sceneBeforeUUID) => {
		const outline = [...Beat.outline()]
		
		let sceneIndex = -1
		let targetIndex = -1

		for (let i=0; i<outline.length; i++) {
			let s = outline[i]
			let uuid = s.line.uuidString()
			
			if (uuid == sceneUUID) sceneIndex = i;
			else if (uuid == sceneBeforeUUID) targetIndex = i;
		}

		// Do nothing if we couldn't find the scene
		if (sceneIndex == -1) return;
		
		let scene = outline[sceneIndex]
		let sibling = outline[targetIndex]
		
		let stringToMove = Beat.getText().substring(scene.position, scene.position + scene.length)
		let targetPosition = (sibling) ? sibling.position : Beat.getText().length
		
		let position = scene.position
		let length = scene.length
		
		// Then onto some very convoluted code for taking care of omissions
		if (outline[targetIndex - 1] && outline[targetIndex - 1].omitted &&
			outline[targetIndex] && outline[targetIndex].omitted && !scene.omitted) {
			stringToMove = "\n*/\n\n" + stringToMove + "\n/*\n\n"
		}
		else if (sibling?.omitted && outline[targetIndex - 1] && !outline[targetIndex - 1].omitted && !scene.omitted) {
			// Find the omission
			targetPosition = sibling.omissionStartsAt
		} else if (scene.omitted) {
			// Move an omitted scene
			if (outline[sceneIndex-1]?.omitted && outline[sceneIndex+1]?.omitted) {
				stringToMove = "/*\n\n" + stringToMove + "*/\n\n"
			}
			else if (outline[sceneIndex-1]?.omitted && !outline[sceneIndex+1]?.omitted) {
				// We need to close the current omission
				Beat.replaceRange(scene.position, 0, "*/\n")
				position += 3
				if (targetPosition > position) targetPosition += 3;

				stringToMove = "\n/*\n\n" + stringToMove
			}
			else if (!outline[sceneIndex-1]?.omitted && !outline[sceneIndex+1]?.omitted) {
				position = scene.omissionStartsAt
				length = scene.length + scene.position - position
				stringToMove = Beat.getText().substring(position, position + length)
			}
		}

		// Disable listeners for a second
		Beat.onSelectionChangeDisabled = true
		Beat.onTextChangeDisabled = true

		if (targetPosition < scene.position) {
			Beat.replaceRange(position, length, "")
			Beat.replaceRange(targetPosition, 0, stringToMove)
		} else {
			Beat.replaceRange(targetPosition, 0, stringToMove)
			Beat.replaceRange(position, length, "")
		}

		Beat.onSelectionChangeDisabled = false
		Beat.onTextChangeDisabled = false
		
		refreshHTML()
	},
	
	returnToEditor: () => {
		window.closePanel()
	},
	
	printCards: () => {
		printCards()
	},

	modifySynopsis: (uuid, newString, color) => {
		let line = Beat.currentParser.lineWithUUID(uuid)
		if (line == null) return;

		if (newString == "" || newString == null || newString == '\n') {
			// Remove synopsis
			Beat.replaceRange(line.position, line.length+1, "")
			return
		}
		
		color = (line.color.length > 0) ? line.color : ""
		
		let string = "= " + newString
		if (color.length > 0) string += " [[" + color + "]]"
		
		Beat.replaceRange(line.position, line.length, string)
	},
	
	addSynopsis: (uuid, newString) => {
		let sceneHeading = Beat.currentParser.lineWithUUID(uuid)
		
		const lines = Beat.lines()
		let index = lines.indexOf(sceneHeading)
		if (index == -1) return;
		
		let suitableIndex = index
		
		// Find a good place to add our synopsis to
		for (let i=index+1; i++; i<lines.length) {
			let line = lines[i]
			if (line.type == Beat.type.empty) continue;
			
			if (line.type == Beat.type.synopsis) {
				suitableIndex = i
			} else {
				break
			}
		}
		
		// Add it
		let l = lines[suitableIndex]
		let position = l.position + l.length
		
		let string = "= " + newString
		
		if (l.type == Beat.type.synopsis) string = "\n" + string;
		else if (l.type == Beat.type.heading) string = "\n\n" + string;
		
		Beat.addString(string, position)
	}
}


// ###################################
// Printing
// ###################################

function printCards() {
	let css = Beat.appAssetAsString("BeatCardsPrint.css")
	let printedHTML = ""

	let json = []
	let outline = Beat.outline()

	for (let i=0; i < outline.length; i++) {
		let scene = updateScene(outline[i])

		scene.synopsisList = ""
			if (scene.synopsis.length) {
				let synopsisList = []
				for (const synopsis of scene.synopsis) {
					synopsisList += templates.synopsisItem.withData(synopsis)
				}

				if (synopsisList.length > 0) scene.synopsisList = templates.synopsisList.withData({ synopsisList: synopsisList })
				scene.text = ""
			}

		json.push(scene)
    }

    let imageableSize = Beat.printInfo().imageableSize

	// Orientation is ALWAYS LANDSCAPE
	let cardsPerRow = 3;
	let maxRows = Math.floor(imageableSize.width / 165);

    let cardsOnRow = 0
	let rows = 0

    for (const card of json) {
    	if (card.typeAsString == "section") continue;

    	let cardHTML = templates.printedCard.withData(card)
    	printedHTML += cardHTML

    	cardsOnRow++
    	
    	if (cardsOnRow == cardsPerRow) {
    		rows++
    		cardsOnRow = 0
    	}
    	if (rows == maxRows) {
    		printedHTML += "</section><div class='pageBreak'></div><section>"

    		rows = 0
    		cardsOnRow = 0
    	}
    }

    let settings = {
    	orientation: "landscape",
    	margins: [5, 5, 5, 5]
    }

    let htmlContent = "<html><head><style>" + css + "</style></head><body><div id='container'><section>" + printedHTML + "</section></div></body></html>"
    Beat.printHTML(htmlContent, settings, () => {

    })
}

function windowed() {
	return (Beat.container == undefined)
}

